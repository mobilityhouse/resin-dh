#!/bin/sh

VOLUME_NAME="nand_rootfs"
MOUNT_POINT="/mnt/flash"
TARBALL=""

############################################################################
# Helpers

print_usage() {
cat<<EOF

 This utility writes a .tar.bz2 file to flash memory as a new filesystem.

 Usage: $0 [OPTIONS]

 OPTIONS:

 -h                    Print this help and exit.
 -f /path/to/tar/bz2   The file containing the new file system.

EOF
}

############################################################################
# Tools check

FILE_EXISTS="yes"

command -v command > /dev/null 2>&1
if [[ $? -ne 0 ]]
then
	FILE_EXISTS="no"
else
	command -v file > /dev/null 2>&1
	if [[ $? -ne 0 ]]
	then
		FILE_EXISTS="no"
	fi
fi

############################################################################
# User privileges check

USER=`whoami`
if [ "$USER" != "root" ]
then
	echo "ERROR: You must be root to run this command."
    echo "Aborting."
	exit 1
fi

############################################################################
# Options parsing

while getopts hf: option
do
	case "$option" in
		h)
			print_usage $0
			exit 0
			;;
		f)
			TARBALL="$OPTARG"
			;;
		*)
			print_usage $0
			exit 1
			;;
	esac
done

############################################################################
# Options sanity checks

if [ -z "${TARBALL}" ]
then
    print_usage $0
    exit 1
elif [ ! -f ${TARBALL} ]
then
    echo "ERROR: \"${TARBALL}\" is not a file."
    print_usage $0
    exit 1
fi

if [ "${FILE_EXISTS}" == "yes" ]
then
    VALID_TARBALL=`file ${TARBALL} | grep -i "bzip2 compressed data"`
    if [ -z "${VALID_TARBALL}" ]
    then
        echo "ERROR: file ${TARBALL} is not a valid bzip2 (.tar.bz2) file."
        print_usage $0
        exit 1
    fi
fi

############################################################################
# Asking for confirmation

cat<<EOF

 WARNING:
 The execution of this program will erase partition /dev/mtd1 of the flash
 memory!

EOF
read -p "Are you sure you want to continue? [yN]: "
if [ "${REPLY}" != "y" -a "${REPLY}" != "Y" ]
then
	echo "Aborting."
	exit 1
fi

############################################################################
# Writing the new filesystem to flash

flash_erase /dev/mtd1 0 0
ubiformat /dev/mtd1
ubiattach -p /dev/mtd1
ubimkvol -N ${VOLUME_NAME} -m /dev/ubi0
mkdir -p ${MOUNT_POINT}
mount -t ubifs ubi0:${VOLUME_NAME} ${MOUNT_POINT}
echo "Extracting the tarball to serial flash, it will take a while..."
tar -C ${MOUNT_POINT} -xjf ${TARBALL}
sync
umount ${MOUNT_POINT}
ubidetach -p /dev/mtd1
